{"version":3,"sources":["Components/Dash/Table.js","Components/Dash/Stats.js","Components/Dash/PageToggle.js","Components/Dash/Dash.js","Components/NavList/NavList.js","Components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","results","tableData","undefined","data","begin","page","resultsPerPage","end","splice","slice","map","className","Stats","mean","median","mode","datapoints","lowestValue","highestValue","variance","standardDeviation","retval","dataset","length","i","calculateMean","Math","floor","getMedian","modeKeeper","modeValue","modeCount","calculateMode","highestBuffer","getHighestValue","lowestBuffer","getLowestValue","sumOfSquares","diff","calculateVariance","std","sqrt","calcateStandardDeviation","DataToggle","renderChart","name","onClick","e","type","value","axisToggle","startYear","onChange","endYear","Dash","setChartState","labels","buildAxisLabels","chartData","buildSlicedDataChart","setState","chartAxis","state","title","display","text","chartTitle","fontSize","position","datasets","label","validateJSON","json","frequency","push","processData","dataDivisor","dataSet","completeChartData","unshift","description","componentDidMount","superSecureOnGitHub","APIEndPoint","fetch","then","resp","buildChart","options","responsive","maintainAspectRatio","legend","target","dataArrayLength","nextPageIndexArrayIndex","stateValue","stateNumericValue","Number","toggleRenderChartTable","numericalValue","stateStartYear","stateEndYear","dataFrequency","numericalData","nextProps","nextState","nextAxisStart","nextAxisEnd","axisUpdate","this","chartUpdate","tableUpate","startYearOffset","endYearOffset","abs","to","url","tableClick","React","Component","NavList","navListLinks","navListRoutes","useRouteMatch","path","subDomainKeys","subDomains","Object","keys","link","exact","Fragment","links","growth","GDP","GDPC1","GDPPOT","pricesinflation","CPIAUCSL","CPILFESL","GDPDEF","moneysupply","BASE","M1","M2","M1V","M2V","interestrates","DFF","DTB3","DGS5","DGS10","DGS30","T5YIE","T10YIE","T5YIFR","TEDRATE","DPRIME","employment","UNRATE","NROU","NROUST","CIVPART","EMRATIO","UNEMPLOY","PAYEMS","MANEMP","ICSA","IC4WSA","incomeandexpenditure","MEHOINUSA672N","DSPIC96","PCE","PCEDG","PSAVERT","RRSFS","DSPI","debt","GFDEBTN","GFDEGDQ188S","EXCSRESNW","TOTCI","linkNameMappings","NavBar","linkKeys","collapableLinks","routes","linkKey","id","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ae8d0f6.chunk.js","sourcesContent":["import React from \"react\";\n\n//This component toggles which slice of the array to rander in the Table component\nfunction PageToggle(props) {\n  return (\n    <React.Fragment>\n      <section className=\"row align-items-center justify-content-center\">\n        <h3>Select a Page</h3>\n      </section>\n      <section className=\"row align-items-center justify-content-center\">\n        <button\n          name=\"previous-page\"\n          onClick={e => props.onClick(e)}\n          className=\"btn btn-primary\"\n        >\n          Previous Page\n        </button>\n        <span> Page:{props.page}</span>\n        <button\n          name=\"next-page\"\n          onClick={e => props.onClick(e)}\n          className=\"btn btn-primary\"\n        >\n          Next Page\n        </button>\n      </section>\n    </React.Fragment>\n  );\n}\nfunction Table(props) {\n  let results = <div>Table data has not finished loading</div>;\n\n  if (\n    props.tableData !== null &&\n    props.tableData !== undefined &&\n    props.tableData.data\n  ) {\n    //starting index is the page number multipled by the results rendered per page.\n    // I did this way since some of the arrays can contains thousands of entries.\n    // what begin equates to is the starting index of the splice of the data array\n    //we'd like to display.\n    let begin = props.tableData.page * props.tableData.resultsPerPage;\n    let end = begin + props.tableData.resultsPerPage; //\n    let splice = props.tableData.data.slice(begin, end);\n\n    if (splice !== undefined && splice !== null) {\n      results = splice.map(data => (\n        <section className=\"row align-items-center justify-content-center border-bottom-black custom-row\">\n          <div className=\"col-6\">{data[0]}</div>\n          <div className=\"col-6\">{data[1]}</div>\n        </section>\n      ));\n    }\n  }\n  let retVal = (\n    <div className=\"container table-display\">\n      {\" \"}\n      <section className=\"row align-items-center justify-content-center custom-header-row border-bottom-black\">\n        <div className=\"col-6\">Date</div>\n        <div className=\"col-6\">Measurement</div>\n      </section>\n      {results}\n    </div>\n  );\n\n  return retVal;\n}\n\nexport default Table;\n","import React from \"react\";\n\nfunction calculateMean(data) {\n  let mean = 0;\n  for (let i = 0; i < data.length; i++) mean += data[i];\n  mean = mean / data.length;\n\n  return mean;\n}\n\nfunction getMedian(data) {\n  return data[Math.floor(data.length / 2)];\n}\n\nfunction calculateMode(data) {\n  let modeKeeper = {};\n  let modeValue = undefined;\n  let modeCount = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    modeValue = data[i];\n\n    if (modeKeeper[modeValue] !== undefined) {\n      modeKeeper[modeValue] += 1;\n    } else {\n      modeKeeper[modeValue] = 1;\n    }\n  }\n\n  modeValue = undefined;\n\n  for (let i in modeKeeper) {\n    if (modeKeeper[i] > modeCount) {\n      modeCount = modeKeeper[i];\n      modeValue = i;\n    }\n\n    return [modeValue, modeCount];\n  }\n}\n\nfunction getLowestValue(data) {\n  let lowestValue = data[0];\n  let lowestBuffer = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    lowestBuffer = data[i];\n    if (lowestBuffer < lowestValue) {\n      lowestValue = lowestBuffer;\n    }\n  }\n  return lowestValue;\n}\n\nfunction getHighestValue(data) {\n  let highestValue = 0;\n  let highestBuffer = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    highestBuffer = data[i];\n    if (highestBuffer > highestValue) {\n      highestValue = highestBuffer;\n    }\n  }\n  return highestValue;\n}\n\nfunction calculateVariance(data, mean) {\n  let sumOfSquares = 0;\n  let diff = 0;\n  let length = data.length;\n  let variance = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    diff = mean - data[i];\n    diff = diff * diff;\n    sumOfSquares += diff;\n    diff = 0;\n  }\n\n  variance = sumOfSquares / length;\n\n  return variance;\n}\n\nfunction calcateStandardDeviation(data, mean) {\n  let sumOfSquares = 0;\n  let diff = 0;\n  let length = data.length;\n  let std = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    diff = mean - data[i];\n    diff = diff * diff;\n    sumOfSquares += diff;\n    diff = 0;\n  }\n\n  std = sumOfSquares / length;\n  std = Math.sqrt(std);\n\n  return std;\n}\n\nfunction Stats(props) {\n  let data = null;\n  let mean = 0;\n  let median = 0;\n  let mode = 0;\n  let datapoints = 0;\n  let lowestValue = 0;\n  let highestValue = 0;\n  let variance = 0;\n  let standardDeviation = 0;\n  let retval = (\n    <section className=\"container\">\n      <div>No statistical information computed yet...</div>\n    </section>\n  );\n\n  if (props.dataset !== undefined && props.dataset.data !== undefined) {\n    data = props.dataset.data;\n    if (data.length !== undefined && data.length !== null && data.length > 0) {\n      datapoints = data.length;\n      mean = calculateMean(data);\n      median = getMedian(data);\n      mode = calculateMode(data);\n      highestValue = getHighestValue(data);\n      lowestValue = getLowestValue(data);\n      variance = calculateVariance(data, mean);\n      standardDeviation = calcateStandardDeviation(data, mean);\n      let dummyColumn = null;\n\n      retval = (\n        <section className=\"container stats-report mx-0 px-0 w-100\">\n          <div className=\"row stats-row align-items-center justify-content-center\">\n            <div className=\"col-12 col-sm-4\">Mean: {mean}</div>\n            <div className=\"col-12 col-sm-4\">Median: {median}</div>\n            <div className=\"col-12 col-sm-4\">Mode Value: {mode[0]}</div>\n          </div>\n          <div className=\"row stats-row align-items-center justify-content-center\">\n            <div className=\"col-12 col-sm-4\">Datapoints: {datapoints}</div>\n            <div className=\"col-12 col-sm-4\">Lowest: {lowestValue}</div>\n            <div className=\"col-12 col-sm-4\">Highest: {highestValue}</div>\n          </div>\n          <div className=\"row stats-row align-items-center justify-content-center\">\n            <div className=\"col-12 col-sm-4\">Variance: {variance}</div>\n            <div className=\"col-12 col-sm-4\">\n              Standard Dev: {standardDeviation}\n            </div>\n          </div>\n          <div className=\"col-12 col-sm-4\">{dummyColumn}</div>\n        </section>\n      );\n    }\n  }\n\n  return retval;\n}\n\nexport default Stats;\n","import React from \"react\";\nimport \"./PageToggle.css\";\n\n//This component toggles which slice of the array to rander in the Table component\nfunction DataToggle(props) {\n  if (props.renderChart === false)\n    return (\n      <section className=\"container toggle-container mx-0 px-0 align-items-center page-toggle-container page-text py-1\">\n        <section className=\" row align-items-center justify-content-center mx-0 px-0\">\n          <h3 className=\"custom-header toggle-header\">Select a Page</h3>\n        </section>\n        <section className=\"row align-items-center justify-content-center fit-content\">\n          <button\n            name=\"previous-page\"\n            onClick={e => props.onClick(e)}\n            className=\"btn btn-primary col-md-3\"\n          >\n            Previous Page\n          </button>\n\n          <span className=\"col-md-3\"> Page:{props.page}</span>\n          <button\n            name=\"next-page\"\n            onClick={e => props.onClick(e)}\n            className=\"btn btn-primary col-md-3\"\n          >\n            Next Page\n          </button>\n        </section>\n      </section>\n    );\n  else {\n    return (\n      <section className=\"container toggle-container mx-0 px-0 align-items-center page-toggle-container py-1\">\n        <section className=\"row justify-content-center align-items-center h-100\">\n          <section className=\"col-12 col-md-6\">\n            <h3 className=\"custom-header toggle-header col-12\">Start year</h3>\n            <input\n              type=\"number\"\n              value={props.axisToggle.startYear}\n              onClick={e => props.onClick(e)}\n              name=\"start-year\"\n              onChange={e => props.onChange(e)}\n            />\n          </section>\n          <section className=\"col-12 col-md-6\">\n            <h3 className=\"custom-header toggle-header col-12\">\n              Select End year\n            </h3>\n            <input\n              type=\"number\"\n              value={props.axisToggle.endYear}\n              onClick={e => props.onClick(e)}\n              name=\"end-year\"\n              onChange={e => props.onChange(e)}\n            />\n          </section>\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default DataToggle;\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"./Dash.css\";\nimport Table from \"./Table\";\nimport Stats from \"./Stats\";\nimport DataToggle from \"./PageToggle\";\n\nclass Dash extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      renderChart: false, //This bool decides whether or not to render data or chart.\n      chartAxis: { startYear: null, endYear: null }, //This variable determines the chart axis start and end.\n      completeChartData: null,\n      dataFrequency: 1,\n      numericalData: [],\n      chartData: {\n        startYear: null, //this start value represents the starting yr on the dataset.\n        endYear: null, //this end year represents the ending year on the dataset.\n        //These values represent the start and end dates on the actual graph label, which can be adjusted\n        title: {\n          display: true,\n          text: \"Loading Data\",\n          fontSize: 20\n        },\n        labels: [],\n        datasets: []\n      },\n      tableData: { page: \"---\", resultsPerPage: 0, data: null },\n      description: \"Loading Descripton...\"\n    };\n  }\n\n  //Do some basic validation to make sure stuff recieved from the\n  //server is usable\n\n  setChartState = (startYear, endYear) => {\n    let labels = this.buildAxisLabels(startYear, endYear); //build the labels.\n    let name = \"\";\n    let chartData = this.buildSlicedDataChart(startYear, endYear);\n\n    this.setState({\n      chartAxis: { startYear: startYear, endYear: endYear },\n      chartData: {\n        startYear: this.state.chartData.startYear || startYear,\n        endYear: this.state.chartData.endYear || endYear,\n        title: {\n          display: true,\n          text: this.state.chartTitle,\n          fontSize: 20,\n          position: \"top\"\n        },\n        labels: labels,\n        datasets: [\n          {\n            label: this.state.chartTitle,\n            data: chartData\n          }\n        ]\n      }\n    });\n  };\n  validateJSON = json => {\n    let data = undefined;\n\n    if (json !== null && json !== undefined) {\n      let dataset = json.dataset;\n      if (dataset !== undefined && dataset !== null) {\n        if (dataset.frequency && dataset.data) {\n          data = json.dataset;\n        }\n      }\n    }\n\n    return data;\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let nextAxisStart = nextState.chartAxis.startYear;\n    let nextAxisEnd = nextState.chartAxis.endYear;\n    let axisUpdate =\n      nextAxisStart !== this.state.chartAxis.startYear ||\n      nextAxisEnd !== this.state.chartAxis.endYear;\n    let chartUpdate = this.state.renderChart !== nextState.renderChart;\n    let tableUpate =\n      this.state.tableData.page != nextState.tableData.page &&\n      this.state.tableData.data !== nextState.data;\n\n    return axisUpdate || chartUpdate || tableUpate;\n  }\n\n  //builds varying labels for the axis.\n  buildAxisLabels = (startYear, endYear) => {\n    let labels = [];\n\n    // only build labels if startYear is less than endYear, otherwise return an\n    // empty array.\n    if (startYear < endYear) {\n      for (let i = startYear; i <= endYear; i++) labels.push(i);\n    }\n\n    return labels;\n  };\n\n  buildSlicedDataChart(startYear, endYear) {\n    let data = [];\n    let startYearOffset = 0;\n    let endYearOffset = 0;\n    let splicedChart;\n\n    if (\n      this.state.chartData.startYear !== null &&\n      this.state.chartData.endYear !== null &&\n      this.state.completeChartData\n    ) {\n      startYearOffset =\n        Math.abs(startYear - this.state.chartData.startYear) *\n        this.state.frequency;\n      endYearOffset =\n        Math.abs(endYear - this.state.chartData.endYear) * this.state.frequency;\n    }\n\n    endYearOffset = this.state.completeChartData.length - endYearOffset;\n    splicedChart = this.state.completeChartData.slice(\n      startYearOffset,\n      endYearOffset\n    );\n\n    return splicedChart;\n  }\n\n  //this function process data when it is first loaded from the server.\n  processData = json => {\n    //Data is divided into daily, monthly, and weekly intervals.\n    //Datadivisor is used to help build the chart labels.\n    let dataDivisor = 1;\n    let dataSet = this.validateJSON(json); //validate json and make sure all fields are present.\n    let endYear = 2020;\n    let startYear = Math.floor(0);\n    let completeChartData = [];\n    //Determine dataset frequency and set divisor to matching value.\n    if (dataSet !== undefined) {\n      //Set dataDivisor to the dataset frequency daily,monthly, or yearly (1 the default)\n      switch (dataSet.frequency) {\n        case \"daily\":\n          dataDivisor = 365;\n          break;\n        case \"monthly\":\n          dataDivisor = 12;\n          break;\n        default:\n          break;\n      }\n\n      for (let i = 0; i < json.dataset.data.length; i++) {\n        completeChartData.unshift(json.dataset.data[i][1]);\n      }\n      startYear = Math.floor(endYear - dataSet.data.length / dataDivisor);\n\n      //set frequency in state\n      this.setState({\n        completeChartData: completeChartData,\n        frequency: dataDivisor,\n        chartTitle: dataSet.name,\n        tableData: { page: 0, resultsPerPage: 10, data: dataSet.data },\n        description: \"Loading Descripton...\"\n      });\n      //use data divisor to estimate start year.\n      this.setChartState(startYear, endYear);\n      //Build year labels in 10 year increments.\n    }\n  };\n\n  componentDidMount = () => {\n    let superSecureOnGitHub = `https://www.quandl.com/api/v3/datasets/FRED/${this.props.APIEndPoint}?api_key=_wmZxLRTTxChvkafJjFh`;\n    fetch(superSecureOnGitHub).then(resp => {\n      resp.json().then(json => {\n        this.processData(json);\n      });\n    });\n  };\n\n  buildChart = () => {\n    return (\n      <Line\n        data={this.state.chartData}\n        options={{\n          responsive: true,\n          maintainAspectRatio: false,\n          title: this.state.chartData.title + \" Graph\",\n          legend: {\n            display: true,\n            position: \"top\"\n          }\n        }}\n      />\n    );\n  };\n\n  onClick = e => {\n    //I stored these state variables locally to avoid long variable names.\n    let name = e.target.name;\n    let page = this.state.tableData.page;\n    let resultsPerPage = this.state.tableData.resultsPerPage;\n    let dataArrayLength = this.state.tableData.data.length;\n    let nextPageIndexArrayIndex = (page + 1) * resultsPerPage;\n    let stateValue = e.target.value;\n    let stateNumericValue = Number(stateValue);\n\n    switch (name) {\n      case \"table-click\":\n        this.setState({ renderChart: false });\n        break;\n      case \"chart-click\":\n        this.setState({ renderChart: true });\n        break;\n      case \"next-page\":\n        if (nextPageIndexArrayIndex < dataArrayLength) {\n          this.setState({\n            tableData: {\n              page: page + 1,\n              resultsPerPage: resultsPerPage,\n              data: this.state.tableData.data\n            }\n          });\n        }\n        break;\n      case \"previous-page\":\n        if (page >= 1) {\n          this.setState({\n            tableData: {\n              page: page - 1,\n              resultsPerPage: resultsPerPage,\n              data: this.state.tableData.data\n            }\n          });\n        }\n        break;\n      case \"start-year\":\n        if (stateNumericValue) {\n          this.setChartState(stateNumericValue, this.state.chartAxis.endYear);\n        }\n        break;\n      case \"end-year\":\n        if (stateNumericValue) {\n          this.setChartState(this.state.chartAxis.startYear, stateNumericValue);\n        }\n        break;\n    }\n  };\n\n  toggleRenderChartTable = e => {};\n\n  onChange = e => {\n    let name = e.target.name;\n    let value = e.target.value;\n    let numericalValue = Number(value);\n    let stateStartYear = this.state.chartData.startYear;\n    let stateEndYear = this.state.chartData.endYear;\n\n    switch (name) {\n      case \"start-year\":\n        if (\n          numericalValue &&\n          numericalValue < stateEndYear &&\n          numericalValue > stateStartYear\n        )\n          this.setState({\n            chartAxis: {\n              startYear: numericalValue,\n              endYear: this.state.chartAxis.endYear\n            }\n          });\n        break;\n      case \"end-year\":\n        if (\n          numericalValue &&\n          numericalValue > stateStartYear &&\n          numericalValue <= stateEndYear\n        )\n          this.setState({\n            chartAxis: {\n              startYear: this.state.chartAxis.startYear,\n              endYear: numericalValue\n            }\n          });\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    let renderResult = (\n      <section className=\"container w-100 dash-container\">\n        <section className=\"row custom-header-row align-items-center\">\n          <a\n            name=\"chart-click\"\n            className=\"link mx-0 px-0 col justify-content-center align-items-center\"\n            to={`${this.state.url}/'table'`}\n            onClick={this.onClick}\n          >\n            {\" \"}\n            Chart\n          </a>\n          <a\n            name=\"table-click\"\n            className=\"link mx-0 px-0 col justify-content-center align-items-center\"\n            to={`${this.state.url}/'table'`}\n            onClick={this.onClick}\n          >\n            Table\n          </a>\n        </section>\n\n        <section className=\"row  data-display\">\n          {\" \"}\n          {this.state.renderChart ? (\n            this.buildChart()\n          ) : (\n            <Table tableClick={this.onClick} tableData={this.state.tableData} />\n          )}\n        </section>\n        <section className=\"row\">\n          {\" \"}\n          <DataToggle\n            renderChart={this.state.renderChart}\n            axisToggle={this.state.chartAxis}\n            page={this.state.tableData ? this.state.tableData.page : \"---\"}\n            onClick={this.onClick}\n            onChange={this.onChange}\n          />\n        </section>\n        <section className=\"row col mx-0 px-0\">\n          <Stats dataset={this.state.chartData.datasets[0]} />\n        </section>\n      </section>\n    );\n    return renderResult;\n  }\n}\n\nexport default Dash;\n","import React from \"react\";\nimport { Link, useRouteMatch, Route, Switch } from \"react-router-dom\";\nimport \"./NavList.css\";\nimport Dash from \"../Dash/Dash\";\n\nfunction NavList(props) {\n  let navListLinks = <div>No sub-catagories found.</div>;\n  let navListRoutes = null;\n  let { path, url } = useRouteMatch();\n  let subDomainKeys = null;\n\n  if (props.subDomains !== undefined && props.subDomains !== null) {\n    subDomainKeys = Object.keys(props.subDomains);\n\n    navListLinks = subDomainKeys.map(link => {\n      return (\n        <Link\n          className=\"nav-link custom-link row justify-content-center\"\n          to={`${url}/${link}/data`}\n        >\n          {props.subDomains[link]}\n        </Link>\n      );\n    });\n    navListRoutes = subDomainKeys.map(link => {\n      return (\n        <Route exact path={`${path}/${link}/data`}>\n          <Dash APIEndPoint={link} />\n        </Route>\n      );\n    });\n  }\n  navListLinks = (\n    <React.Fragment>\n      <Route exact path={`${path}`}>\n        <section className=\"nav-sub-list container border w-50\">\n          <h1 className=\"nav-heading\">Contents</h1>\n          {navListLinks}\n        </section>\n      </Route>\n      <Route>{navListRoutes}</Route>\n    </React.Fragment>\n  );\n\n  return <React.Fragment>{navListLinks}</React.Fragment>;\n}\n\nexport default NavList;\n","import React from \"react\";\nimport { Link, useRouteMatch, Route, Switch } from \"react-router-dom\";\nimport \"./Nav.css\";\nimport NavList from \"../NavList/NavList\";\n\nconst links = {\n  growth: {\n    GDP: \"Gross Domestic Product\",\n    GDPC1: \"Real Gross Domestic Product\",\n    GDPPOT: \"Potential Gross Domestic Product\"\n  },\n  pricesinflation: {\n    CPIAUCSL: \"Consumer Price Index for All Urban Consumers: All Items\",\n    CPILFESL:\n      \"Consumer Price Index for All Urban Consumers: All Items Less Food & Energy\",\n    GDPDEF: \"Gross Domestic Product: Implicit Price Deflator\"\n  },\n  moneysupply: {\n    BASE: \"St. Louis Adjusted Monetary Base\",\n    M1: \"M1 Money Stock\",\n    M2: \"M2 Money Stock\",\n    M1V: \"Velocity of M1 Money Stock\",\n    M2V: \"Velocity of M2 Money Stock\"\n  },\n  interestrates: {\n    DFF: \"Effective Federal Funds Rate\",\n    DTB3: \"3-Month Treasury Bill: Secondary Market Rate\",\n    DGS5: \"5-Year Treasury Constant Maturity Rate\",\n    DGS10: \"10-Year Treasury Constant Maturity Rate\",\n    DGS30: \"30-Year Treasury Constant Maturity Rate\",\n    T5YIE: \"5-year Breakeven Inflation Rate\",\n    T10YIE: \"10-year Breakeven Inflation Rate\",\n    T5YIFR: \"5-Year, 5-Year Forward Inflation Expectation Rate\",\n    TEDRATE: \"TED Spread\",\n    DPRIME: \"Bank Prime Loan Rate\"\n  },\n  employment: {\n    UNRATE: \"Civilian Unemployment Rate\",\n    NROU: \"Natural Rate of Unemployment (Long-Term)\",\n    NROUST: \"Natural Rate of Unemployment (Short-Term)\",\n    CIVPART: \"Civilian Labor Force Participation Rate\",\n    EMRATIO: \"Civilian Employment-Population Ratio\",\n    UNEMPLOY: \"Unemployed\",\n    PAYEMS: \"All Employees: Total nonfarm\",\n    MANEMP: \"All Employees: Manufacturing\",\n    ICSA: \"Initial Claims\",\n    IC4WSA: \"4-Week Moving Average of Initial Claims\"\n  },\n  incomeandexpenditure: {\n    MEHOINUSA672N: \"Real Median Household Income in the United States\",\n    DSPIC96: \"Real Disposable Personal Income\",\n    PCE: \"Personal Consumption Expenditures\",\n    PCEDG: \"Personal Consumption Expenditures: Durable Goods\",\n    PSAVERT: \"Personal Saving Rate\",\n    RRSFS: \"Real Retail and Food Services Sales\",\n    DSPI: \"Disposable personal income\"\n  },\n  debt: {\n    GFDEBTN: \"Federal Debt: Total Public Debt\",\n    GFDEGDQ188S:\n      \"Federal Debt: Total Public Debt as Percent of Gross Domestic Product\",\n    EXCSRESNW: \"Excess Reserves of Depository Institutions\",\n    TOTCI: \"Commercial and Industrial Loans, All Commercial Banks\"\n  }\n};\n\nconst linkNameMappings = [\n  \"Economic Growth\",\n  \"Prices & Inflation\",\n  \"Money Supply\",\n  \"Interest Rates\",\n  \"Employment\",\n  \"Income and Expenditure\",\n  \"Debt\"\n];\n\nfunction NavBar(props) {\n  let i = -1; //Iterator used in loop below.\n  let linkKeys = Object.keys(links); //link object fields into an array of strings.\n  //Add keys to the navbar\n  let collapableLinks = linkKeys.map(link => {\n    i++; //increment iterator used to display more human readable name on nav bar.\n    return (\n      <Link\n        className=\"nav-link custom-link row justify-content-center\"\n        to={`/${link}`}\n      >\n        {linkNameMappings[i]}\n      </Link>\n    );\n  });\n\n  let routes = (\n    <Switch>\n      {linkKeys.map(linkKey => (\n        <Route path={`/${linkKey}`}>\n          <NavList subDomains={links[linkKey]} />\n        </Route>\n      ))}\n    </Switch>\n  );\n  let navbar = (\n    <React.Fragment>\n      <div className=\"collapse\" id={\"links\"}>\n        <div>{collapableLinks}</div>\n      </div>\n      <nav className=\"navbar navbar-expand-xl navbar-light nav-custom\">\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#links\"\n          aria-controls=\"links\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n      </nav>\n      {routes}\n    </React.Fragment>\n  );\n\n  return navbar;\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./Components/Nav/Nav\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}